name: Deploy to Raspberry Pi

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggers from GitHub UI

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Show deployment info
        run: |
          echo "🚀 Deploying Weather App to Raspberry Pi"
          echo "============================================"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Workspace: $GITHUB_WORKSPACE"
          echo ""
      
      - name: Deploy Backend
        run: |
          echo "📦 Deploying Backend..."
          cd $GITHUB_WORKSPACE/backend
          
          # Ensure uv is in PATH
          export PATH="$HOME/.cargo/bin:$PATH"
          
          # Install/update Python dependencies
          uv sync
          
          echo "✅ Backend dependencies updated"
      
      - name: Deploy Frontend
        run: |
          echo "📦 Deploying Frontend..."
          cd $GITHUB_WORKSPACE/frontend
          
          # Install dependencies (use npm ci for consistent installs)
          npm ci
          
          # Build production bundle
          npm run build
          
          echo "✅ Frontend built successfully"
      
      - name: Restart Services
        run: |
          echo "🔄 Restarting services..."
          
          # Restart backend service
          sudo systemctl restart weather.service
          echo "✅ Backend service restarted"
          
          # Restart frontend service
          sudo systemctl restart weather-frontend.service
          echo "✅ Frontend service restarted"
      
      - name: Health Check - Backend
        run: |
          echo "🔍 Checking backend health..."
          echo "⏳ Waiting for backend to be ready..."
          
          # Retry logic: try for up to 60 seconds
          max_attempts=12
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts..."
            
            if curl -f -s http://localhost:8000/latest > /dev/null 2>&1; then
              echo "✅ Backend is responding at http://localhost:8000/latest"
              exit 0
            fi
            
            if [ $attempt -lt $max_attempts ]; then
              echo "Not ready yet, waiting 5 seconds..."
              sleep 5
            fi
            
            attempt=$((attempt + 1))
          done
          
          echo "❌ Backend health check failed after ${max_attempts} attempts"
          echo "Checking service status..."
          sudo systemctl status weather.service --no-pager || true
          echo ""
          echo "Recent logs:"
          journalctl -u weather.service -n 30 --no-pager || true
          exit 1
      
      - name: Health Check - Frontend
        run: |
          echo "🔍 Checking frontend health..."
          echo "⏳ Waiting for frontend to be ready..."
          
          # Retry logic: try for up to 60 seconds
          max_attempts=12
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts..."
            
            if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Frontend is responding at http://localhost:3000"
              exit 0
            fi
            
            if [ $attempt -lt $max_attempts ]; then
              echo "Not ready yet, waiting 5 seconds..."
              sleep 5
            fi
            
            attempt=$((attempt + 1))
          done
          
          echo "❌ Frontend health check failed after ${max_attempts} attempts"
          echo "Checking service status..."
          sudo systemctl status weather-frontend.service --no-pager || true
          echo ""
          echo "Recent logs:"
          journalctl -u weather-frontend.service -n 30 --no-pager || true
          exit 1
      
      - name: Deployment Summary
        if: success()
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 Deployment Successful!"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "📊 Dashboard: http://192.168.86.49:3000"
          echo "🔌 API:       http://192.168.86.49:8000"
          echo ""
          echo "View logs:"
          echo "  Backend:  journalctl -u weather.service -f"
          echo "  Frontend: journalctl -u weather-frontend.service -f"
          echo ""
      
      - name: Deployment Failed
        if: failure()
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "❌ Deployment Failed"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""
          echo "Check service status:"
          echo "  sudo systemctl status weather.service"
          echo "  sudo systemctl status weather-frontend.service"
          echo ""
          echo "Check logs:"
          echo "  journalctl -u weather.service -n 50"
          echo "  journalctl -u weather-frontend.service -n 50"
          echo ""

